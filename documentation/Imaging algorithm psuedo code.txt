constant int blockPixelSize = 100;

Rect tempBitmapRect; //Used for all bitmap drawing rectangles, saves memory.
Rect phoneSizeRect = new Rect(0,0,canvas.getWidth(), canvas.getHeight());

Bitmap playerBitmap = player.getBitmap();
Bitmap mapBitmap = new Bitmap(Map Image file);
int imgX = mapBitmap.getWidth();
int imgY = mapBitmap.getHeight();

//It is possible that blockPixelSize does not need to be used at all
/*
 * It is presumed however, that blockPixelSize must be used
 * because it is creating an imaginary image where each block is 100 pixels
 * and then it is upscaled to the image. If you left it by converting 1 to the 
 * imageRatio, the blocks will be one pixel wide.
 * Actually, i dont know. Try it without it first
*/

int estimatedMapX = mapManipulator.map.Width * blockPixelSize;
int estimatedMapY = mapManipulator.map.Height * blockPixelSize;

double ratioX = estimatedMapX / imageX;
double ratioY = estimatedMapY / imageY;

playerImageX = (player.x * blockPixelSize) / ratioX;
playerImageY = (player.y * blockPixelSize) / ratioY;

phoneULeftX = playerImageX - (canvas.getWidth / 2);
phoneULeftY = playerImageY - (canvas.getHeight / 2);
phoneBRightX = playerImageX + (canvas.getWidth / 2);
phoneBRightY = playerImageY + (canvas.getHeight / 2);

tempBitmapRect = new Rect(phoneULeftX, phoneULeftY, phoneBRightX, phoneBRightY);

//Finally draws map
canvas.drawBitmap(
		mapBitmap, 
		tempBitmapRect, 
		phoneSizeRect,
		null 
		);

//Draws player
tempBitmapRect = new Rect(
		(canvas.getWidth / 2) - (player.getWidth / 2),
		(canvas.getHeight / 2) - (player.getHeight / 2),
		(canvas.getWidth / 2) + (player.getWidth / 2),
		(canvas.getHeight / 2) + (player.getHeight / 2)
		) //Adding and subtracting player widht and height so center of player image is center of screen

canvas.drawBitmap(playerBitmap, null, tempBitmapRect, null);

//GET IT TO WORK WITHOUT ENTITIES FIRST

Bitmap entityBitmap;
double entityX;
double entityY;
//DRAWING ENTITIES
for(int i = 0; i < entities.size(); i++)
{
	entityBitmap = entities.get(i).getBitmap();
	entityX = ((entity.get(i).x * blockPixelSize) / ratioX) - phoneULeftX;
	entityY = ((entity.get(i).y * blockPixelSize) / ratioY) - phoneULeftY;
	tempBitmapRect = new Rect(
		entityX - (entity.get(i).width / 2),
		entityY - (entity.get(i).height / 2),
		entityX + (entity.get(i).width / 2),
		entityY + (entity.get(i).height / 2)
	)
	canvas.drawBitmap(entityBitmap, null. tempBitmapRect, null);
}

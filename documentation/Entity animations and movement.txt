--Overview:
	-Entity is the superclass that all subsequent classes will inherit from, to be used in loops, etc.
	-Entity is a private standard class. No static, obviously.
	-Entity has a map XY coordinate, corresponding to the coordinate in the current ASCII map loaded in ArrayList<ArrayList<Character>>
	in the static class MapManipulator.
	-Entity has an integer variable direction with 0=idle,1=up,2=right,3=down,4=left.
	-Entity has an integer variable, orientation, so if direction is 0, the playerwill stay in idle animation.
	-Entity has an integer variable named animationCounter which is just a placeholder variable for counting frames for each class's animation.
	-Each entity has a getBitMap() method, which returns the "R.drawable.[imgName]" which happens to be an integer value.
	
	//THIS IS JUNK FOR NOW, YOU SHOULD WRITE ALGORITHM BY HAND FIRST, OR EVEN PSEUDOCODE, TRY TYPING IT THO IT IS A LOT OF FREESTYLE
--Algorithm
1.) In the drawing method that is constantly looping, a forloop, which loops through the entities static ArrayList<Entity>, will assign the temporary
bitMap to entities.get(i).getBitMap(); This part of the forloop will simplycall the method for the Entity, and move on.
2.)The return of getBitMap() is entirely reliant upon the Entity's private variables. It will be determined by a large list of if statements.
	i.)First we will check the orientation. If the direciton is 0, you will play idle animation. If it is still a direction, set
		Most likely, a method will be used to check this. like if(getOrientation() == #). There will be 4 of these if statment blocks, for 4 possible directions
	ii.)Next is another string of if statments. These if statements will check the animation counter.
		a.)Start by setting the temporary return variable to a default image to notify if theres a problem.
		b.)Then, every if statement will check if(animationCounter == #) with all being elseif's. And will set the returnVariable to the subsequent hardcoded image.
		c.)At the end of the method, animationCounter will increment.
		d.)The last frame will set animationCounter back to 0, and return the last image without incrementing.
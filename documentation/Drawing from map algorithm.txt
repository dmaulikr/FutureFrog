Reference-
MapManipulator, a class for manipulating the map
	.map - the ArrayList<ArrayList<Character>> for the map

canvas, the canvas for drawing to the screen, it is the size of the whole phone screen

drawBitmap()- 
	[public void drawBitmap ( Bitmap bitmap, Rect src, Rect dst, Paint paint )]
		-bitmap	The bitmap to be drawn
		-src	May be null. The subset of the bitmap to be drawn
		-dst	The rectangle that the bitmap will be scaled/translated to fit into
		-paint	May be null. The paint used to draw the bitmap

--Drawing map
1.) Load mapImage into a bitMap. Doing so will also load the image's actual perceived dimensions into the bitMap to
to be referenced later. Then go to MapManipulator.map, and find the x and y dimensions of the ASCII map. Multiply the 
dimensions by a constant for how large each block should be on the screen. (say 100x100). Save 
the ratio of the estimated dimensions to the real dimensions to be used later.
2.)Do the same for the player position. Use the player ASCIImap XY positions to multiply by block constant (100x100)
to find estimated playerPosition on the relative map image. Then use ratio of estimated mapDimension to real mapDimension to find
the real playerPosition on the mapImage. Find the upper left hand corner and lower right hand corner of where the phone screen would be by
adding and subtracting the (canvasDimensions / 2). This will give you markers of where the corners of the 
screen should be on the actual image. Save the upper left and lower right real map image coordinates for later.
3.) Draw the map bitmap to the screen using the source as a rectangle from the saved upperleft lowerright 
and the destination as a rectangle that is the entire screen. The corner coordinates will correspond to 
the bitMap, where the destination rectangle will correspond to the screen.

--Drawing player
4.)Simply draw the player bitMap to the center of the canvas. No need to do calculations, the player is always in the center of the screen.

--Drawing entities
5.)Keep the upperlefthandcorner phonescreen image coordinate handy. For every entity ASCII mapXY find the estimated image XY and convert to 
real using the same ratio as before. Once you have the real image coordinate of the entity, subtract the 
upperleft corner real image coordinate from the real entity image coordinate to find the distance of the entity from the
upper left hand corner coordinate on the actual image. Use the distance XY coordinates to draw the entity to the canvas, using the
algorithm and for loop (polymorphism) already in place. This is where the convertCoordinate() [not that big of a deal] method comes in. Look at the code.

//--Notes
-This method allows for the map and the other entities to be drawn relative to the player at all times with the 5 step algorithm.
-This allows for all classes to only need to keep track of their coordinate on the map, and only change that coordinate when they move
-This allows for a constant for block size to be changed and for the algorithm to still work, excluding corner cases that I don't want to 
write checks for, like negative numbers. These are hard coded though so its okay.

-Keep in mind that doing calculations with estimated vs real map coordinates could have big effects on the coordinates drawn to the screen,
and they should be done uniformly.
-Keep in mind that using a floating point or double value for the ratio will naturally lead to round off errors or propogated error. Decimals 
should be kept as long as possible before casting to (int).